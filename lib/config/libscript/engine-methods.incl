
public:

struct pair_template_t {};
static const pair_template_t PairTemplate;
ClassTemplate getTemplate(pair_template_t) const;
void setTemplate(passkey, pair_template_t, const ClassTemplate & ct);

struct list_template_t {};
static const list_template_t ListTemplate;
ClassTemplate getTemplate(list_template_t) const;
void setTemplate(passkey, list_template_t, const ClassTemplate & ct);

struct proxy_template_t {};
static const proxy_template_t ProxyTemplate;
ClassTemplate getTemplate(proxy_template_t) const;

struct ref_template_t {};
static const ref_template_t RefTemplate;
ClassTemplate getTemplate(ref_template_t) const;

struct map_template_t {};
static const map_template_t MapTemplate;
ClassTemplate getTemplate(map_template_t) const;
void setTemplate(passkey, map_template_t, const ClassTemplate & ct);

struct set_template_t {};
static const set_template_t SetTemplate;
ClassTemplate getTemplate(set_template_t) const;
void setTemplate(passkey, set_template_t, const ClassTemplate & ct);

void registerQtType(const QMetaObject *mo, const script::Type & type);
Type getQtType(const QMetaObject *mo) const;
Value expose(QObject *obj);
Value expose(QObject *obj, Type t);
void bind(const script::Value & val, QObject *obj);

Value newPtr(const Type & ptr_type, void *value);